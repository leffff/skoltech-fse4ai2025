name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run Black (Code Formatting)
      run: |
        black --check backend/ tests/
        
    - name: Run Flake8 (Linting)
      run: |
        flake8 backend/ tests/
        
    - name: Run MyPy (Type Checking)
      run: |
        mypy backend/app/ || true
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=backend/app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build ${{ matrix.service }} Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service }}/Dockerfile
        push: false
        tags: blip-${{ matrix.service }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Start services with Docker Compose
      run: |
        docker compose up -d --build
        
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for backend to be ready..."
        timeout 120 sh -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        echo "Backend is ready!"
        
    - name: Check frontend accessibility
      run: |
        timeout 60 sh -c 'until curl -f http://localhost:8501; do sleep 2; done'
        echo "Frontend is ready!"
        
    - name: Run basic API tests
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        # Test model info endpoint
        curl -f http://localhost:8000/model-info
        
    - name: Show logs on failure
      if: failure()
      run: |
        docker compose logs
        
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

